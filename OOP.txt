/*
|-----------------------------------------------------
| Start LEARN OOP 3:25PM at IFINANCE 
|-----------------------------------------------------
*/
#OOPs (Object-Oriented Programming System)
Object means a real-world entity such as a pen, chair, table, computer, watch, etc.
Object-Oriented Programming is a methodology or paradigm to design a program using classes and objects. 
1. Object
2. Class
3. Inheritance
4. Polymorphism
5. Abstraction
6. Encapsulation


Inheritance: When one object acquires all the properties and behaviors of a parent object, it is known as inheritance. It provides code reusability. It is used to achieve runtime polymorphism.
Polymorphism: If one task is performed in different ways, it is known as polymorphism. For example: to convince the customer differently, to draw something, for example, shape, triangle, rectangle, etc.
               Another example can be to speak something; for example, a cat speaks meow, dog barks woof, etc.	
Abstraction: Hiding internal details and showing functionality is known as abstraction. For example phone call, we don't know the internal processing.
            In Java, we use abstract class and interface to achieve abstraction.
			
Encapsulation: Binding (or wrapping) code and data together into a single unit are known as encapsulation. For example, a capsule, it is wrapped with different medicines.


Coupling:

Association: Association represents the relationship between the objects. Here one object can be associated with one object or many objects.
             There can be four types of association between the objects:
			 # One to One
			 # One to Many
			 # Many to One
			 # Many to Many
			 
What will we learn in OOPs Concepts?
   @ Advantage of OOPs
   @ Naming Convention 
   @ Object and class 
   @ Method overloading 
   @ Constructor
   @ static keyword 
   @ this keyword with six usage
   @ Inheritance 
   @ Aggregation 
   @ Method Overriding 
   @ Covariant Return Type 
   @ super keyword 
   @ Instance Initializer block 
   @ final keyword 
   @ Abstract class  
   @ Interface 
   @ Runtime Polymorphism 
   @ Static and Dynamic Binding
   @ Downcasting with instanceof operator
   @ Package
   @ Access Modifiers
   @ Encapsulation
   @ Object Cloning
   
   
   #Java Naming Convention
   All the classes, interfaces, packages, methods and fields of Java programming language are given according to the Java naming convention.
   If you fail to follow these conventions, it may generate confusion or erroneous code.
   
   Advantage of Naming Conventions in Java
   Class: It should start with the uppercase letter.
   Interface: It should start with the uppercase letter.
   Method: It should start with lowercase letter.
           If the name contains multiple words, start it with a lowercase letter followed by an uppercase letter such as actionPerformed()
	Variable: It should start with a lowercase letter such as id, name.
	           If the name contains multiple words, start it with the lowercase letter followed by an uppercase letter such as firstName, lastName.
			   
			   
	An object has three characteristics:
	State: represents the data (value) of an object.
	Behavior: represents the behavior (functionality) of an object such as deposit, withdraw, etc.
	Identity: An object identity is typically implemented via a unique ID. The value of the ID is not visible to the external user.
            	However, it is used internally by the JVM to identify each object uniquely.
				
	Object Definitions:
		#An object is a real-world entity.
		#An object is a runtime entity.
		#The object is an entity which has state and behavior.
		#The object is an instance of a class.
		
	A class in Java can contain:
		#Fields
		#Methods
		#Constructors
		#Nested class and interface
		
Syntax to declare a class:	
	class <class_name>{  
		field;  
		method;  
	}  
	
	
	#Method in Java
	In Java, a method is like a function which is used to expose the behavior of an object.
	#new keyword in Java
	The new keyword is used to allocate memory at runtime. All objects get memory in Heap memory area.