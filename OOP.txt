/*
|-----------------------------------------------------
| Start LEARN OOP 3:25PM at IFINANCE 
|-----------------------------------------------------
*/
#OOPs (Object-Oriented Programming System)
Object means a real-world entity such as a pen, chair, table, computer, watch, etc.
Object-Oriented Programming is a methodology or paradigm to design a program using classes and objects. 
1. Object
2. Class
3. Inheritance
4. Polymorphism
5. Abstraction
6. Encapsulation


Inheritance: When one object acquires all the properties and behaviors of a parent object, it is known as inheritance. It provides code reusability. It is used to achieve runtime polymorphism.
Polymorphism: If one task is performed in different ways, it is known as polymorphism. For example: to convince the customer differently, to draw something, for example, shape, triangle, rectangle, etc.
               Another example can be to speak something; for example, a cat speaks meow, dog barks woof, etc.	
Abstraction: Hiding internal details and showing functionality is known as abstraction. For example phone call, we don't know the internal processing.
            In Java, we use abstract class and interface to achieve abstraction.
			
Encapsulation: Binding (or wrapping) code and data together into a single unit are known as encapsulation. For example, a capsule, it is wrapped with different medicines.


Coupling:

Association: Association represents the relationship between the objects. Here one object can be associated with one object or many objects.
             There can be four types of association between the objects:
			 # One to One
			 # One to Many
			 # Many to One
			 # Many to Many
			 
What will we learn in OOPs Concepts?
   @ Advantage of OOPs
   @ Naming Convention 
   @ Object and class 
   @ Method overloading 
   @ Constructor
   @ static keyword 
   @ this keyword with six usage
   @ Inheritance 
   @ Aggregation 
   @ Method Overriding 
   @ Covariant Return Type 
   @ super keyword 
   @ Instance Initializer block 
   @ final keyword 
   @ Abstract class  
   @ Interface 
   @ Runtime Polymorphism 
   @ Static and Dynamic Binding
   @ Downcasting with instanceof operator
   @ Package
   @ Access Modifiers
   @ Encapsulation
   @ Object Cloning
   
   
   #Java Naming Convention
   All the classes, interfaces, packages, methods and fields of Java programming language are given according to the Java naming convention.
   If you fail to follow these conventions, it may generate confusion or erroneous code.
   
   Advantage of Naming Conventions in Java
   Class: It should start with the uppercase letter.
   Interface: It should start with the uppercase letter.
   Method: It should start with lowercase letter.
           If the name contains multiple words, start it with a lowercase letter followed by an uppercase letter such as actionPerformed()
	Variable: It should start with a lowercase letter such as id, name.
	           If the name contains multiple words, start it with the lowercase letter followed by an uppercase letter such as firstName, lastName.
			   
			   
	An object has three characteristics:
	State: represents the data (value) of an object.
	Behavior: represents the behavior (functionality) of an object such as deposit, withdraw, etc.
	Identity: An object identity is typically implemented via a unique ID. The value of the ID is not visible to the external user.
            	However, it is used internally by the JVM to identify each object uniquely.
				
	Object Definitions:
		#An object is a real-world entity.
		#An object is a runtime entity.
		#The object is an entity which has state and behavior.
		#The object is an instance of a class.
		
	A class in Java can contain:
		#Fields
		#Methods
		#Constructors
		#Nested class and interface
		
Syntax to declare a class:	
	class <class_name>{  
		field;  
		method;  
	}  
	
	
	#Method in Java
	In Java, a method is like a function which is used to expose the behavior of an object.
	#new keyword in Java
	The new keyword is used to allocate memory at runtime. All objects get memory in Heap memory area.

------Inheritance
	Inheritance in Java is a mechanism in which one object acquires all the properties and behaviors of a 		parent object. It is an important part of OOPs (Object Oriented programming system).
	When you inherit from an existing class, you can reuse methods and fields of the parent class. Moreover, 	you can add new methods and fields in your current class also.

----Terms used in Inheritance
	Class: A class is a group of objects which have common properties. It is a template or blueprint from 		which objects are created.
	Sub Class/Child Class: Subclass is a class which inherits the other class. It is also called a derived 				               class, extended class, or child class.
	Super Class/Parent Class: Superclass is the class from where a subclass inherits the features. It is also 				  called a base class or a parent class.
----The syntax of Java Inheritance
	class Subclass-name extends Superclass-name  
	{  
  		 //methods and fields  
	}  
	The extends keyword indicates that you are making a new class that derives from an existing class. The 	meaning of "extends" is to increase the functionality.

---Single Inheritance Example
	When a class inherits another class, it is known as a single inheritance. In the example given below, 
	Dog class inherits the Animal class, so there is the single inheritance.
	Example:
	class Animal{  
		void eat(){System.out.println("eating...");}  
	}  
	
	class Dog extends Animal{  
		void bark(){System.out.println("barking...");}  
	}  
	
	class TestInheritance{  
		public static void main(String args[]){  
			Dog d=new Dog();  
			d.bark();  
			d.eat();  
	}}  

Output:
barking...
eating...

------Multilevel Inheritance Example
When there is a chain of inheritance, it is known as multilevel inheritance.
BabyDog class inherits the Dog class which again inherits the Animal class, so there is a multilevel inheritance.
Example
class Animal{  
	void eat(){System.out.println("eating...");}  
}  
class Dog extends Animal{  
	void bark(){System.out.println("barking...");}  
}  
class BabyDog extends Dog{  
	void weep(){System.out.println("weeping...");}  
}  
class TestInheritance2{  
	public static void main(String args[]){  
			BabyDog d=new BabyDog();  
			d.weep();  
			d.bark();  
			d.eat();  
}}  
Output:

weeping...
barking...
eating...

----Hierarchical Inheritance Example
When two or more classes inherits a single class, it is known as hierarchical inheritance.
Dog and Cat classes inherits the Animal class, so there is hierarchical inheritance.

class Animal{  
	void eat(){System.out.println("eating...");}  
}  
class Dog extends Animal{  
	void bark(){System.out.println("barking...");}  
}  
class Cat extends Animal{  
	void meow(){System.out.println("meowing...");}  
}  
class TestInheritance3{  
	public static void main(String args[]){  
			Cat c=new Cat();  
			c.meow();  
			c.eat();  
			//c.bark();//C.T.Error  
}} 


-----Aggregation in Java
If a class have an entity reference, it is known as Aggregation 
Example
class Operation{  
 int square(int n){  
  return n*n;  
 }  
}  
  
class Circle{  
 Operation op;//aggregation  
 double pi=3.14;  
    
 double area(int radius){  
   op=new Operation();  
   int rsquare=op.square(radius);//code reusability (i.e. delegates the method call).  
   return pi*rsquare;  
 }  
  
     
    
 public static void main(String args[]){  
   Circle c=new Circle();  
   double result=c.area(5);  
   System.out.println(result);  
 }  
}  

Output:78.5

When use Aggregation?
Code reuse is also best achieved by aggregation when there is no is-a relationship.
Example:
	#Address.java
	public class Address {  
		String city,state,country;  
  
		public Address(String city, String state, String country) {  
				this.city = city;  
				this.state = state;  
				this.country = country;  
			}  
  
	}  
	
	#Emp.java
	public class Emp {  
		int id;  
		String name;  
		Address address;  
  
		public Emp(int id, String name,Address address) {  
			this.id = id;  
			this.name = name;  
			this.address=address;  
		}  
  
		void display(){  
			System.out.println(id+" "+name);  
			System.out.println(address.city+" "+address.state+" "+address.country);  
		}  
  
		public static void main(String[] args) {  
				Address address1=new Address("gzb","UP","india");  
				Address address2=new Address("gno","UP","india");  
  
				Emp e=new Emp(111,"varun",address1);  
				Emp e2=new Emp(112,"arun",address2);  
      
				e.display();  
				e2.display();  
      
		}  
	}  
	
	Output:111 varun
			gzb UP india
			112 arun
			gno UP india 
			
--Example 04: Multiple Inheritance (Through Interfaces)
	using System;
interface IMother {
	public void DisplayParents() { }
	public void DisplayMother() { }
}
interface IFather {
	public void DisplayParents() { }
	public void DisplayFather() { }
}
class Child : IMother, IFather {
	public void DisplayParents() { // implements the interface's method
	Console.WriteLine("Here are my parents");
}
public void DisplayMother() { // implements the Mother interface's method
	Console.WriteLine("Here is my mother");
}

public void DisplayFather() { // implements the Father interface's method
	Console.WriteLine("Here is my father");
}
	public void DisplayChild()
	{
	Console.WriteLine("I am a child");
	}
	}
class Program {
static void Main(string[] args)
{
Child child = new Child();
child.DisplayChild();
child.DisplayMother();
child.DisplayFather();
child.DisplayParents();
Console.ReadKey();
}
}



Example 05: Multiple Inheritance (Through Interfaces)
using System;
interface IMother
{
	public void DisplayParents();
	public void DisplayMother();
}

interface IFather
{
	public void DisplayParents();
	public void DisplayFather();
}

class Child : IMother, IFather
{
	public void DisplayParents()
	{ // implements the interface's method
	Console.WriteLine("Here are my parents");
}

public void DisplayMother()
{ // implements the Mother interface's method
	Console.WriteLine("Here is my mother");
}

public void DisplayFather()
{ // implements the Father interface's method
	Console.WriteLine("Here is my father");
}
public void DisplayChild()
{
	Console.WriteLine("I am a child");
}
}
class Program
{
	static void Main(string[] args)
	{
		IMother child1 = new Child();
		child1.DisplayChild(); //Error
		child1.DisplayMother();
		child1.DisplayFather(); //Error
		child1.DisplayParents();
		IFather child2 = new Child();
		child2.DisplayChild(); //Error
		child2.DisplayMother(); //Error
		child2.DisplayFather();
		child2.DisplayParents();
		Child child3 = new Child();
		child3.DisplayChild();
		child3.DisplayMother();
		child3.DisplayFather();
		child3.DisplayParents();
		Console.ReadKey();
	}
}



Example 05: Hybrid Inheritance
using System;
class Grandparent
{
	public void DisplayGrandparent()
	{
		Console.WriteLine("Here is my Grandparent");
	}
}
class Parent : Grandparent
{
	public void DisplayParent()
		{
			Console.WriteLine("Here is my parent");
		}
}
class ChildA : Parent
{
	public void DisplayChildA()
	{
		Console.WriteLine("I am the child A");
	}
}
class ChildB : Parent
{
	public void DisplayChildB()
		{
		Console.WriteLine("I am the child B");
		}
}

class Program
{
	public static void Main(string[] args)
	{
		ChildA childA = new ChildA();
		ChildB childB = new ChildB();
		childA.DisplayChildA();
		childA.DisplayParent(); // accessing parent class
		childA.DisplayGrandparent(); // accessing Grandparent class
		childB.DisplayChildB();
		childB.DisplayParent(); // accessing parent class
		childB.DisplayGrandparent(); // accessing Grandparent class
		Console.ReadKey();
	}
}
Output
I am the child A
Here is my parent
Here is my Grandparent
I am the child B
Here is my parent
Here is my Grandparent

In above example, multilevel and hierarchical inheritance both are mixed:
- Multilevel Inheritance: ChildA class inherits Parent class which inherits Grandparent class.
ChildB class inherits Parent class which inherits Grandparent class.
- Hierarchical Inheritance: ChildA and ChildB both inherit Parent class.


Example 07: Hybrid Inheritance (Through Interfaces)
using System;
interface IGrandparent
{
	public void DisplayGrandparent(){ }
}

interface IMother : IGrandparent
{
	public void DisplayMother(){ }
}

interface IFather : IGrandparent
{
	public void DisplayFather() { }
}
class Child : IMother, IFather
{
	public void DisplayGrandparent()
	{
		Console.WriteLine("Here is my Grandparent");
	}
	public void DisplayFather()
	{
		Console.WriteLine("Here is my father");
	}
	public void DisplayMother()
	{
		Console.WriteLine("Here is my mother");
	}
	public void DisplayChild()
	{
		Console.WriteLine("I am a child");
	}
}
class Program
{
public static void Main(string[] args)
{
Child child = new Child();
child.DisplayChild();
child.DisplayMother();
child.DisplayFather();
child.DisplayGrandparent();
Console.ReadKey();
}
}
25
Chea Daly OOAD
Output
I am a child
Here is my mother
Here is my father
Here is my Grandparent
In above example, hierarchical and multiple inheritance both are mixed:
- Hierarchical Inheritance: Mother and Father interfaces both inherit Grandparent interface.
- Multiple Inheritance: Child class inherits both Mother and Father interfaces.
- Multilevel Inheritance: Child class inherits Mother class which inherits Grandparent class.
Child class inherits Father class which inherits Grandparent class.

------Encapsulation
Encapsulation means hiding or covering. In C#, encapsulation is achieved by access modifiers. Access modifiers specify the accessibility of an object and all of its members
You can also limit access to class members. For example, you might need to keep the BankAccount class public for some reason, but make the AccountBalance field and TaxRate field and GetBalanceAfterTax() method private so that no other class can access these class members except the BankAccount class. You can do this as follows:
Example 01:
public class BankAccount
{
	private double AccountBalance;
	private double TaxRate;
	private double GetBalanceAfterTax()
			{
			return AccountBalance * TaxRate;
			}
}

-Access Modifiers
The access modifiers that are available in C# are the following:
• private
• public
• protected
• internal
• protected internal
• private protected

private Access Modifiers:
Objects that implement private access modifier are accessible only inside a class. As a result, we cannot access them outside the class they are created.
Example 02: In this example, we declare a field as private
using System;
class NumberClass
{
	private int number = 10;
}

class Program
{
	static void Main()
	{
		NumberClass num = new NumberClass();
		Console.WriteLine(num.number); // Error. We cannot access the number variable
		// because it has the private access modifier and its only accessible in the
		// NumberClass class
	}
}


-public Access Modifiers
Objects that implement public access modifiers are accessible from everywhere in our project
Example 04: In this example, we declare a class member as public
using System;
class NumberClass
{
public int number = 10;
}
class Program
{
static void Main()
{
NumberClass num = new NumberClass();
Console.WriteLine(num.number); // This is OK. The number variable has the public
// access modifier.
Console.ReadKey();
}
}
Output
10

---Abstraction and Interface 05-11-2022 home at 11:07AM
Abstraction is the process of hiding certain details and showing only essential information to the user.
Abstraction can be achieved with either abstract classes or interfaces.

Abstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).

Abstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the derived class

Remember from the Inheritance chapter that we use the : symbol to inherit from a class, and that we use the override keyword to override the base class method.


------Interface
An interface is a completely "abstract class", which can only contain abstract methods and properties (with empty bodies):
interface Animal
{
void animalSound(); // interface method (does not have a body)
void run(); // interface method (does not have a body)
}

The main features of interfaces
•Interfaces cannot have a method body; they can only have the method signature.
• An interface cannot be instantiated, so no object of an interface can be created.
• One class can extend multiple interfaces.

The body of the interface method is provided by the "implement" class. 
*Note that you do not have to use the override keyword when implementing an interface:
Example 04
using System;
interface IBankAccount
{
	void Debit(double amount);
	void Credit(double amount);
}

class BankAccount : IBankAccount
{
	public void Debit(double amount)
	{
		Console.WriteLine(amount + "$ has been debited from your account!");
	}
	public void Credit(double amount)
	{
		Console.WriteLine(amount + "$ has been credited to your account!");
	}
}

public class Program
{
	static void Main()
	{
		BankAccount account1 = new BankAccount();
		account1.Debit(1000);
		account1.Credit(2000);
		Console.ReadKey();
	}
}
	
	Output
	1000$ has been debited from your account!
	2000$ has been credited to your account!
	
Notes on Interfaces
• Like abstract classes, interfaces cannot be used to create objects (in the example above, it is not possible to create an "IAnimal" object in the Program class)
• Interface methods do not have a body - the body is provided by the "implement" class
• On implementation of an interface, you must override all of its methods
• Interfaces can contain properties and methods, but not fields/variables
• Interface members are by default abstract and public
• An interface cannot contain a constructor (as it cannot be used to create objects).

Why and When To Use Interfaces
C# does not support "multiple inheritance" (a class can only inherit from one base class). However, it can be achieved with interfaces, because the class can implement multiple interfaces.
Note: To implement multiple interfaces, separate them with a comma (see example below).

Example 05
using System;
	interface IFirstInterface
	{
		void Method1(); // interface method
	}
	interface ISecondInterface
	{
		void Method2(); // interface method
	}

// Implement multiple interfaces
class Class1 : IFirstInterface, ISecondInterface
{
	public void Method1()
	{
		Console.WriteLine("This is Method1");
	}
	public void Method2()
	{
		Console.WriteLine("This is Method2");
	}
}

class Program
{
	static void Main(string[] args)
	{
		Class1 obj = new Class1();
		obj.Method1();
		obj.Method2();
		Console.ReadKey();
	}
}
Output
This is Method1
This is Method2


----Partial Class, Sealed Class, Sealed Method and Properties
Partial ClassThink about a situation where two or more developers need to modify the same class or add new functionalities to the same class. There will be a merge conflict which needs to be resolved.
You can split a single class into smaller portions that can be placed in different code files, and all these files are combined into a single class file when the application is compiled.
 One benefit is that different developers can work on different code files at a time. A partial class is created by using a partial keyword.
 
 Example 01: The following is an example of a partial class:
using System;
public partial class Animal
{
public void Eat()
{
Console.WriteLine("Eating");
}
}
public partial class Animal
{
public void Move()
{
Console.WriteLine("Moving");
}
}
class Program
{
static void Main()
{
Animal obj = new Animal();
obj.Eat();
obj.Move();
Console.ReadKey();

}
}

Every part of the partial class definition should be in the same assembly, but you can use a different source file name.
Example 02
//Class1.cs
using System;
public partial class Animal
{
public void Eat()
{
Console.WriteLine("Eating");
}
}
//Class2.cs
using System;
public partial class Animal
{
public void Move()
{
Console.WriteLine("Moving");
}
}
//Program.cs
using System;
class Program
{
static void Main()
{
Animal obj = new Animal();
obj.Eat();
obj.Move();
Console.ReadKey();
}
}
Output
Eating
Moving

-------Sealed Class
If a class is sealed, that particular class cannot be inherited by other classes. If any class tries to inherit a sealed class, 
the compiler will throw an error.

Example 03: Let's look at an example of a sealed class:
using System;
sealed class Animal
{
	public void Move()
	{
		Console.WriteLine("Moving");
	}
	
	public void Eat()
	{
		Console.WriteLine("Eating");
	}
}

class Program
{
public static void Main()
{
Animal dog = new Animal();
dog.name = "Doggy";
dog.ageInMonths = 1;
dog.Move();
dog.Eat();
}
}

---Sealed Method
If we need to stop a method to be overridden, we need to use Sealed method.
 Sealed method prevents overriding a method of a class.
 This is a method that is declared with the keyword Sealed and is always used with combination of override keyword.
 Derived classes will not be able to override this method as it is sealed for overriding.
 
 ----Properties
 For security reasons, all the fields of a class should not be exposed to the outside world
 Properties have two accessors: get and set. The get accessor gets values from the field while the set accessor sets values to the field. There is a special keyword for a property, named value. 
 This represents the value of a field.
 Usually, inside a class, we declare a data field as private and will provide a set of public SET and GET methods to access the data fields. This is a good programming practice since the data fields are not directly accessible outside the class.
 We must use the setter and getter methods to access the data fields.
 Example 05: using setter and getter methods.
using System;
class Animal
{
private string name;
private int age;
public void SetName(string n)
{
name = n;
}
public string GetName()
{
return name;
}
public void SetAge(int a)
{
age = a;
}
public int GetAge()
{
return age;
}
}
class Program {
public static void Main()
{
Animal dog = new Animal();
dog.SetName("Doggy");
dog.SetAge(2);
string name = dog.GetName();
int age = dog.GetAge();
Console.WriteLine(name + " is " + age + " years old.");
Console.ReadKey();
}
}
Output
Doggy is 2 years old.


Example 06: using properties.
using System;
class Animal
{
public string Name { set; get; }
public int Age { set; get; }
}
class Program
{
public static void Main()
{
Animal dog = new Animal();
dog.Name = "Doggy";
dog.Age = 2;
string name = dog.Name;
int age = dog.Age;
Console.WriteLine(name + " is " + age + " years old.");
Console.ReadKey();
}
}
Output
Doggy is 2 years old.


-----Polymorphism

The word polymorphism means having many forms. There are two types of polymorphism in C#: 
Static Polymorphism and Dynamic Polymorphism.
1. Static Polymorphism
In C#, static polymorphism means defining multiple methods with the same name but with different parameters.
Using static polymorphism, we can perform different tasks with the same method name by passing different parameters.

Static Polymorphism:
is also known as Compile Time Polymorphism

using System;
public class Calculator
{
public int Add(int a, int b)
{
return a + b;
}
public double Add(double a, double b)
{
return a + b;
}
public int Add(int a, int b, int c)
{
return a + b + c;
}
}
public class Program
{
public static void Main()
{
Calculator calculator = new Calculator();
Console.WriteLine(calculator.Add(2, 3));
Console.WriteLine(calculator.Add(1.7, 4.8));
Console.WriteLine(calculator.Add(2, 3, 4));
Console.ReadKey();
}
}
Output
5
6.5
9

-----Dynamic Polymorphism
In c#, dynamic polymorphism means overriding a base class method in the derived class
Dynamic Polymorphism:
- is also known as Runtime Polymorphism
- the role of a method is determined at runtime.
- is achieved by method overriding.

Example 02: Let's see a simple example of dynamic polymorphism in C#.
using System;
public class Animal
{
public virtual void Eat()
{
Console.WriteLine("Eating");
}
}
public class Dog : Animal
{
public override void Eat()
{
Console.WriteLine("Dog eating");
}
}
public class Program
{
public static void Main()
{
Animal dog1 = new Dog();
dog1.Eat();
Console.ReadKey();
}
}
Output
Dog eating


Example 03: Let's see another example of dynamic polymorphism in C# where we are having two derived classes.
using System;
// Base Class
public class Shape
{
public virtual void Draw()
{
Console.WriteLine("Drawing");
}
}
// Derived Class
public class Rectangle : Shape
{
public override void Draw()
{
Console.WriteLine("Drawing rectangle");
}
}
public class Circle : Shape
{
public override void Draw()
{
Console.WriteLine("Drawing circle");
}
}
public class Program
{
public static void Main()
{
Shape shape1 = new Shape();
shape1.Draw();
shape1 = new Rectangle();
shape1.Draw();
shape1 = new Circle();
shape1.Draw();
Console.ReadKey();
}
}
Output
Drawing
Drawing rectangle
Drawing circle



Example 04: Let's see an example of dynamic polymorphism in C# by overriding a property.
using System;
class Mother
{
public virtual int Age { get; set; }
}
class Daughter : Mother
{
private int age;
public override int Age
{
set
{
age = value;
}
get
{
return age;
}
}
}
public class Program
{
public static void Main()
{
Daughter daughter = new Daughter();
daughter.Age = 20;
Console.WriteLine("The daughter's age is " + daughter.Age + " years old.");
Console.ReadKey();
}
}

Output
The daughter's age is 20 years old.


Dynamic Polymorphism also refers to the use of the abstract class. When any other class implements an abstract class, the class also has to implement the abstract methods. 
As different classes can implement the abstract class and can have different implementations of abstract methods,

Example 05: Let's see another example of dynamic polymorphism in C# where we are having two derived classes.
using System;
public abstract class Shape
{
public abstract void Draw();
}
public class Rectangle : Shape
{
public override void Draw()
{
Console.WriteLine("Drawing rectangle");
}
}
public class Circle : Shape
{
public override void Draw()
{
Console.WriteLine("Drawing circle");
}
}
public class Program
{
public static void Main()
{
Shape shape1;
shape1 = new Rectangle();
shape1.Draw();
shape1 = new Circle();
shape1.Draw();
Console.ReadKey();
}
}
Output
Drawing rectangle
Drawing circle


-----Exception Handling
In C#, exception is an event or object which is thrown at runtime. It is a runtime error which can be handled. If we do not handle the exception, 
it prints exception message and terminates the program.


----Exception Handling Keywords
In C#, we use 4 keywords to perform exception handling:
 try, catch, finally, and throw.
 
 Syntax:
try
{
// put the code here that may raise exceptions
}
catch
{
// handle exception here
}
finally
{
// final cleanup code
}

---try/catch
Any suspected code that may raise exceptions should be put inside a try{ } block. During the execution, if an exception occurs,
 the flow of the control immediately jumps to the first matching catch block.
 The catch block is an exception handler block where you can perform some action such as outputting messages.
 The catch block takes a parameter of an exception type using which you can get the details of an exception.
 To handle the possible exceptions in the above example, wrap the code inside a try block and handle the exception in the catch block, as shown below
 
 Example 01: An example with try/catch
using System;
public class Example
{
public static void Main(string[] args)
{
try
{
int a = 10;
int b = 0;
int x = a / b;
}
catch
{
Console.WriteLine("Exception occurred");
}
Console.WriteLine("Rest of the code");
Console.ReadKey();
}
}
Output
Exception occurred
Rest of the code

In the above example, we wrapped this code inside a try block. If an exception occurs inside a try block, then the program will jump to the catch block. Inside a catch block,
we display a message to instruct the user about his mistake.
Note that a try block must be followed by catch block. The try block without a catch block will give a compile-time error.

Ideally, a catch block should include a parameter of a built-in or user-defined exception class to get an error detail. The following includes the Exception type parameter that catches all types of exceptions.

Example 03: Exception handling using try catch block.
using System;
class Program
{
static void Main(string[] args)
{
try
{
Console.Write("Enter a number: ");
var num = int.Parse(Console.ReadLine());
Console.WriteLine("Squre of " + num + " is" + num * num);
}
catch (Exception e)
{
Console.Write("Error info:" + e.Message);
}
Console.ReadKey();
}
}
Output
Enter a number: a
Error info:Input string was not in a correct format.


---finally
The finally block will always be executed whether an exception raised or not. Usually, a finally block should be used to release resources, e.g., to close any stream or file objects that were opened in the try block. 
It must be preceded by catch block.
Example 04: An example with finally in a case that exception is handled.
using System;
public class Example
{
public static void Main(string[] args)
{
try
{
int a = 10;
int b = 0;
int x = a / b;
}
catch (Exception e)
{
Console.WriteLine(e.Message);
}
finally
{
Console.WriteLine("Finally block is executed");
}
Console.WriteLine("Rest of the code");
Console.ReadKey();
}
}
Output
System.DivideByZeroException: Attempted to divide by zero.
Finally, block is executed
Rest of the code

Example 05: An example with finally in a case that the program executes without error.
using System;
public class Example
{
public static void Main(string[] args)
{
try
{
int a = 10;
int b = 1;
int x = a / b;
}
catch (Exception e)
{
Console.WriteLine(e);
}
finally
{
Console.WriteLine("Finally, block is executed");
}
Console.WriteLine("Rest of the code");
Console.ReadKey();
}
}
Output
Finally, block is executed
Rest of the code

-----Exception Filters

ou can use multiple catch blocks with the different exception type parameters. This is called exception filters.
Exception filters are useful when you want to handle different types of exceptions in different ways.

Example 07: Exception Filters.
using System;
class Program
{
static void Main(string[] args)
{
Console.Write("Please enter a number to be divided by 100: ");
try
{
int num = int.Parse(Console.ReadLine());
int result = 100 / num;
Console.WriteLine("100 / {0} = {1}", num, result);
}
catch (DivideByZeroException e)
{
Console.Write("Cannot divide by zero. Please try again.");
}
catch (InvalidOperationException e)
{
Console.Write("Invalid operation. Please try again.");
}
catch (FormatException e)
{
Console.Write("Not a valid format. Please try again.");
}
catch (Exception e)
{
Console.Write("Error occurred! Please try again.");
}
Console.ReadKey();
}
}

------User-Defined Exceptions
C# allows us to create user-defined or custom exception. It is used to make the meaningful exception.
 To do this, we need to inherit Exception class.
 
Example 08: User-defined exception example.
using System;
public class InvalidAgeException : Exception
{
public InvalidAgeException(String message) : base(message)
{
}
}
public class TestUserDefinedException
{
static void validate(int age)
{
if (age < 18)
{
throw new InvalidAgeException("Sorry, Age must be greater than 18");
}
}
public static void Main(string[] args)
{
try
{
validate(12);
}
catch (InvalidAgeException e)
{
Console.WriteLine(e.Message);
}
Console.WriteLine("Rest of the code");
Console.ReadKey();
}
}
Output
Sorry, Age must be greater than 18
Rest of the code