/*
|-----------------------------------------------------
| React Js
|-----------------------------------------------------
*/
#JSX is a syntax extension to JavaScript, and it is recommended to be used with React.

<script src="https://unpkg.com/react@16/umd/react.development.js" crossorigin></script>
 <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js" crossorigin></script>
 <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script> 
 
 #display on browser
 <!DOCTYPE html>
<html>
    <head>
        <title>Test</title>
        <script src="https://unpkg.com/react@16/umd/react.development.js" crossorigin></script>
        <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js" crossorigin></script>
        <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script> 
    </head>
    <body>
        
        <div id="container"></div>
        
        <script type="text/babel">
        ReactDOM.render(
          <h1>Hello, React!</h1>,
          document.getElementById('container')
        )
        </script>
    </body>
</html>


#Facebook has created a handy tool called #Create React App that makes it easy to setup a React project with just a simple command!
#To get started, make sure you have a recent version of #Node installed on your machine.
	Command interminal
	#npx create-react-app my-app
	#cd my-app
	#npm start

This will install all the required dependencies, configure and start the project on #localhost:3000.
edit more

Index.js //display to browser 
import React from 'react';
import ReactDOM from 'react-dom';
import './style.css';

ReactDOM.render(
  <h1>Hello, React! what are you doing </h1>,
  document.getElementById('root')
);
React's render method, and passes it two arguments,
 a JSX element and a container.
 The render method displays the provided element in the container, 
 which, in our case, is the HTML element with id="root".
 
 
---------Expressions in JSX
 We can use any JavaScript expression inside JSX using curly braces.
 example :   const name = "David";
		const el = <p>Hello, {name}</p>;
		
---------Attributes in JSX
We can specify attributes using quotes, just like in HTML:
	example : <div id="name"></div>
When using a JavaScript expression as the attributes value, the quotes should not be used:
	example: <div id={user.id}></div> 
	class becomes className in JSX.
	
---------How Does JSX Work?
When the JSX expressions are compiled, they are converted into JavaScript objects,
 representing React elements.
We use setInterval() method  to call the show function every second and render the counter element on the page.
///Number Upate 
import React from 'react';
import ReactDOM from 'react-dom';
import './style.css';

let number = 0;
function show(){
   number++;
   number*=2;
   ReactDOM.render(
    <h1>{number}</h1>,
    document.getElementById('root')
  )
}

setInterval(show,1000); //setInterval using for call the function and action by time 1000ms = 1sc
--------Components
Components let you split the page into independent and reusable parts.

-------Functional Components
In React, there are 
two types of components that you can use: 
+Functional Components 
+class Components.

Example : functional  Components
		function Hello() {
		  return <h1>Hello world.</h1>;
		}
		
#Notice that the name of the functional component begins with a capital letter

------Rendering Components
In order to display the component, we need to create the corresponding JSX element.
example : const el = <Hello />; 
Now, we can use our user-defined element and render it on the page:

	function Hello() {
	  return <h1>Hello world.</h1>;
	}
	const el = <Hello/>; 
	ReactDOM.render(
	  el, 
	  document.getElementById('root')
	);

------Class Components
Class components are typically used when there are more advanced user interactions,
 like forms, and animations.
All class components need to extend the React.Component class.	

	import React from 'react';
	import ReactDOM from 'react-dom';
	import './style.css';

	class Hello extends React.Component{
	  render(){
		return <h1>hello mother fucker ly leangseng</h1>
	  }
	}
	const el = <Hello/>
	ReactDOM.render(
	  el,
	  document.getElementById('root')
	)
	
Class components need to have a render method,
 which is in charge of telling what the page should show.
------Props
Functional components can accept arguments, similar to JavaScript functions. 
These arguments are called props, and represent an object.

Example: 
	function Hello(props) {
	  return <p>Hello, {props.name}!</p>;
	}
Now, we can add a name attribute to our element:
const el = <Hello name="David" />; 

----Components using Components
Components can use other components to generate an output.
For example :

	import React from 'react';
	import ReactDOM from 'react-dom';
	import './style.css';

	function Hello(props) {
	  return <p>Hello, {props.name}!</p>;
	}

	function App() {
	  return <div>
		<Hello name="David" />
		<Hello name="James" />
		<Hello name="Amy" />
	  </div>;
	}

	const el = <App />; 
	ReactDOM.render(
	  el, 
	  document.getElementById('root')
	);
	
-----Props in Class Components
Props can be accessed in class components using this.props.
for Example: 
	import React from 'react';
	import ReactDOM from 'react-dom';
	import './style.css';

		class Hello extends React.Component {
		  render() {
			return <p>Hello, {this.props.name}!</p>;
		  }
		}

		const el = <Hello name="David" />; 
		ReactDOM.render(
		  el, 
		  document.getElementById('root')
		); 
An important thing to consider is that props are read-only,
 meaning components cannot modify their props.
 
	 import React from 'react';
	import ReactDOM from 'react-dom';
	import './style.css';

	function Item(Props) {
	  return (
		<div className={Props.class}>
		  Name : {Props.name}  <br /> <br />
		  Price: {Props.price} $
		</div>
	  );
	}

	function App(Props) {
	  return (
		<div>
		  <Item class="Box" name="book " price="10.30" />
		  <Item class="Box" name="book " price="10.30" />
		  <Item class="Box" name="book " price="10.30" />
		  
		</div>
	  );
	}
	const el = <App />;
	ReactDOM.render(el, document.getElementById('root'));
	
----State
Many web apps need their components to change their data, for example, 
after user interaction (clicking a button, submitting a form, etc.).
However, props cannot be changed.
In order to allow components to manage and change their data,
React provides a feature called state.
#State is an object that is added as a property in class components.
#As you can see, state is just a simple object, that contains key:value pairs.
Similar to props, the values can be accessed using this.state.
	For example:
		import React from 'react';
		import ReactDOM from 'react-dom';
		import './style.css';

		class Hello extends React.Component{
			state = {
			  name : "Ly leang seng"
			} 
		  
		  render(){
			 return <h1> hello brotter: {this.state.name}</h1>
		   }
		}

		const ls = <Hello/>
		ReactDOM.render(
		  ls, 
		  document.getElementById('root')
		);
----Changing State
State should not be modified directly.Instead, React provides a setState() method,
 that can be used to modify state.
 #When state changes using the setState method, React gets 
 informed and immediately re-renders the component with the updated state.
 Example: 
		import React from 'react';
		import ReactDOM from 'react-dom';
		import './style.css';

		class Counter extends React.Component {
		  state = {
			counter: 0
		  }
		  increment = () => {
			this.setState({counter: this.state.counter+1});
		  }
		  render() {
			return <div>
				<p>{this.state.counter}</p>
				<button onClick={this.increment}>Increment</button>
			</div>;
		  }
		}

		const el = <Counter />; 
		ReactDOM.render(
		  el, 
		  document.getElementById('root')
		);
		
------Props vs State
#We use props to pass data to components.
#Components use state to manage their data.
#Props are read-only and cannot be modified.
#State can be modified by its component using the setState() method.
#The setState() method results in re-rendering the component affected.
Components that have state are called stateful, 
while components that do not use state are called stateless.

------Hooks
#a new feature called hooks was introduced,
 allowing to use state inside of functional components.
#First, we need to import the useState hook:
    import React, { useState } from 'react'; 
#useState returns a pair, the current state value and a function, that lets you change the state.
#useState takes one argument, which is the initial value of the state.
	Example:
	function Hello() {
			  const [name, setName] = useState("David");

			  return <h1>Hello {name}.</h1>;
			}
			
	import React, {useState} from 'react';
	import ReactDOM from 'react-dom';
	import './style.css';
	function Counter(){
	  const [name , setName]= useState("Lyleangseng");
		return (
		   <div>
			 Hello {name}
		   </div>
		)
	}
	const el = <Counter />; 
	ReactDOM.render(
	  el, 
	  document.getElementById('root')
	);
	
------Counter App using Hooks
Remember, hooks can only be used inside functional components.
Hooks are functions that allow to "hook into" React features from function components.
example:
	import React, { useState } from 'react';
	import ReactDOM from 'react-dom';
	import './style.css';

	function Counter() {
	  const [counter, setCounter] = useState(0);

	  function increment() {
		setCounter(counter+1);
	  }
	  return <div>
		  <p>{counter}</p>
		  <button onClick={increment}>Increment</button>
	  </div>;
	}

	const el = <Counter />; 
	ReactDOM.render(
	  el, 
	  document.getElementById('root')
	);
	
------Lifecycle Methods
React provides special lifecycle methods for class components
, which are called when components are mounted, updated or unmounted.
#Mounting is the process when a component is rendered on the page.
#Unmounting is the process when a component is removed from the page.
#The componentDidMount method is called when a component is rendered on the page.
		import React from 'react';
		import ReactDOM from 'react-dom';
		import './style.css';

		class Counter extends React.Component {
		  state = {
			counter: 0
		  }
		  increment = () => {
			this.setState({counter: this.state.counter+1});
		  }
		  componentDidMount() {
			this.setState({counter: 42});
		  }
		  render() {
			return <div>
			<p>{this.state.counter}</p>
			<button onClick={this.increment}>Increment</button>
			</div>;
		  }
		}

		const el = <Counter />; 
		ReactDOM.render(
		  el, 
		  document.getElementById('root')
		);
		
----componentDidUpdate
Another lifecycle method is componentDidUpdate(), which is called when a component is updated in the DOM.
		import React from 'react';
		import ReactDOM from 'react-dom';
		import './style.css';

		class Counter extends React.Component {
		  state = {
			counter: 0
		  }
		  increment = () => {
			this.setState({counter: this.state.counter+1});
		  }
		  componentDidUpdate() {
			alert("Number of clicks: " + this.state.counter);
		  }
		  render() {
			return <div>
			<p>{this.state.counter}</p>
			<button onClick={this.increment}>Increment</button>
			</div>;
		  }
		}

		const el = <Counter />; 
		ReactDOM.render(
		  el, 
		  document.getElementById('root')
		);
#componentDidUpdate() is only called when the component is updated.\

----The useEffect Hook
The lifecycle methods we covered are only available for class components.
However, React provides a special Hook called useEffect to make lifecycle methods available in functional components.
 It combines the componentDidMount, componentDidUpdate, and componentWillUnmount methods into one.
 
        import React, { useState, useEffect } from 'react';
		import ReactDOM from 'react-dom';
		import './style.css';

		function Counter() {
		  const [counter, setCounter] = useState(0);

		  useEffect(() => {
			alert("Number of clicks: " + counter);
		  });

		  function increment() {
			setCounter(counter+1);
		  }
		  return <div>
		  <p>{counter}</p>
		  <button onClick={increment}>Increment</button>
		  </div>;
		}

		const el = <Counter />; 
		ReactDOM.render(
		  el, 
		  document.getElementById('root')
		);
#Just like with the useState hook, 
we need to import useEffect to be able to use it: import React, { useState, useEffect } from 'react';

-----Event Handling
#Handling events in React is very similar to handling events in the DOM
#The only difference is that event names use 
  camelCase syntax and the event handler needs to be passed in curly braces.
  Example : 
	  <button onClick={handleClick}>
			My Button
	  </button>

  Demo: 
	import React, { useState } from 'react';
	import ReactDOM from 'react-dom';
	import './style.css';

	function Counter(){
	  const [num,setNum] = useState(0);
	  function increament(){
		  setNum(num + 1);
	  }
	  return (
			<div>
			   <p>this number : {num}</p>
			   <button onClick={increament}>Click on me </button> 
			
			</div>
		 
	  )
		 

	}

	const el = <Counter />; 
	ReactDOM.render(
	  el, 
	  document.getElementById('root')
	);

----Conditional (Ternary) Operator
     variablename = (condition) ? value1:value2 
----Handling User Input
One of the common ways that users interact with web pages is through text fields.
We can handle user input in React using the onChange event of the text field.
When the value of the text field changes
the event handler is called, updating the value of the field in the component's state.
#target.value // get value from user input 
	Example:
		import React, { useState } from 'react';
		import ReactDOM from 'react-dom';
		import './style.css';

		// $ to reil
		function ChangeMoney(){
			const [money,setMoney] = useState(0);
			function setMoney_1(e){
				setMoney(e.target.value);
			}

			function convert(){
				return money * 4000;
			}
			return (
				<div>
					<input type="text" value={money} onChange = {setMoney_1}/>
					<p>Dollar {money} to khmer : {convert(money)} reil</p>
				</div>
			)


		}
		const el = <ChangeMoney />; 
		ReactDOM.render(
		  el, 
		  document.getElementById('root')
		);
		
-----Forms
#preventDefault() method cancels the event if it is cancelable,
 meaning that the default action that belongs to the event will not occur.
 For example, this can be useful when:
 Clicking on a "Submit" button, prevent it from submitting a form.
	Example : 
		import React, { useState } from 'react';
		import ReactDOM from 'react-dom';
		import './style.css';
		function SumNumber(){
		  const [num,setNum] = useState(0);
		  const [sum, setSum] = useState(0);
		  function changeNumber(e){
			  setNum(e.target.value);
		  }
		   function sum1(){
			   setSum(sum +  Number(num));
		   }
		  return (
			  <div>
				  <input type="number" value={num} onChange={changeNumber}/>
				  <button onClick={sum1} >Add</button>
				  <p> Sum :{sum} </p>
			  </div>
			  
		  )
		}


		const el = <SumNumber />; 
		ReactDOM.render(
		  el, 
		  document.getElementById('root')
		);
		
//using with form element
	import React, { useState } from 'react';
	import ReactDOM from 'react-dom';
	import './style.css';

	function AddForm() {
	  const [sum, setSum] = useState(0);
	  const [num, setNum] = useState(0);

	  function handleChange(e) {
		setNum(e.target.value);
	  }

	  function handleSubmit(e) {
		setSum(sum + Number(num));
		e.preventDefault();
	  }

	  return <form onSubmit={handleSubmit}>
				<input type="number" value={num} onChange={handleChange} />
				<input type="submit" value="Add" />
				 <p> Sum is {sum} </p>
	  </form>;
	}

	const el = <AddForm />; 
	ReactDOM.render(
	  el, 
	  document.getElementById('root')
	);