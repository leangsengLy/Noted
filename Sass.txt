/*
|-----------------------------------------------------
| Start LEARN SASS 11:02PM at Home 07-11-2002 
|-----------------------------------------------------
*/
What is Sass?
Sass stands for Syntactically Awesome Stylesheet
Sass is an extension to CSS
Sass is a CSS pre-processor
Sass is completely compatible with all versions of CSS
Sass reduces repetition of CSS and therefore saves time
Sass was designed by Hampton Catlin and developed by Natalie Weizenbaum in 2006
Sass is free to download and use

Why Use Sass?
Stylesheets are getting larger, more complex, and harder to maintain. 
How Does Sass Work?
A browser does not understand Sass code. Therefore, you will need a Sass pre-processor to convert Sass code into standard CSS.
This process is called transpiling. So, you need to give a transpiler (some kind of program) some Sass code and then get some CSS code back.

#Sass File Type
Sass files has the ".scss" file extension.
#Install Sass
npm install -g sass

Sass Variables
Variables are a way to store information that you can re-use later.
With Sass, you can store information in variables, like:
	strings
	numbers
	colors
	booleans
	lists
	nulls
Sass uses the $ symbol, followed by a name, to declare variables:

#Sass Variable Scope
Sass variables are only available at the level of nesting where they are defined.

#Sass Nested Rules
SASS
nav {
  ul {
    margin: 0;
    padding: 0;
    list-style: none;
  }
  li {
    display: inline-block;
  }
  a {
    display: block;
    padding: 6px 12px;
    text-decoration: none;
  }
}    

BUT CSS
nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}    

#Sass Nested Properties
Many CSS properties have the same prefix, like font-family, font-size and font-weight or text-align, text-transform and text-overflow.\
Example
SCSS Syntax:

font: {
  family: Helvetica, sans-serif;
  size: 18px;
  weight: bold;
}

text: {
  align: center;
  transform: lowercase;
  overflow: hidden;
}

CSS Output:
font-family: Helvetica, sans-serif;
font-size: 18px;
font-weight: bold;

text-align: center;
text-transform: lowercase;
text-overflow: hidden;

#Sass @import and Partials
Sass keeps the CSS code DRY (Don't Repeat Yourself). One way to write DRY code is to keep related code in separate files.
You can create small files with CSS snippets to include in other Sass files. Examples of such files can be: reset file, variables, colors, fonts, font-sizes, etc. 
#Sass Importing Files
@import filename;
Tip: You do not need to specify a file extension, Sass automatically assumes that you mean a .sass or .scss file. You can also import CSS files.
You can import as many files as you need in the main file:
@import "variables";
@import "colors";
@import "reset";

Let's look at an example: Let's assume we have a reset file called "reset.scss", that looks like this:
Example
SCSS Syntax (reset.scss):

html,
body,
ul,
ol {
  margin: 0;
  padding: 0;
  
}

and now we want to import the "reset.scss" file into another file called "standard.scss".

SCSS Syntax (standard.scss):
@import "reset";

body {
  font-family: Helvetica, sans-serif;
  font-size: 18px;
  color: red;
}

So, when the "standard.css" file is transpiled, the CSS will look like this:
CSS output:

html, body, ul, ol {
  margin: 0;
  padding: 0;
}

body {
  font-family: Helvetica, sans-serif;
  font-size: 18px;
  color: red;
}

#Sass Partials
By default, Sass transpiles all the .scss files directly. However, when you want to import a file, you do not need the file to be transpiled directly.
Sass has a mechanism for this: If you start the filename with an underscore, Sass will not transpile it. Files named this way are called partials in Sass.
Sass Partial Syntax:

 _filename;
 
 The following example shows a partial Sass file named "_colors.scss". (This file will not be transpiled directly to "colors.css"):
 Example
"_colors.scss":

$myPink: #EE82EE;
$myBlue: #4169E1;
$myGreen: #8FBC8F;
Now, if you import the partial file, omit the underscore. Sass understands that it should import the file "_colors.scss":
Example
@import "colors";

body {
  font-family: Helvetica, sans-serif;
  font-size: 18px;
  color: $myBlue;
}

#Sass @mixin and @include
The @mixin directive lets you create CSS code that is to be reused throughout the website.
The @include directive is created to let you use (include) the mixin.
#Defining a Mixin
A mixin is defined with the @mixin directive.
Sass @mixin Syntax:

@mixin name {
  property: value;
  property: value;
  ...
}

The following example creates a mixin named "important-text":

SCSS Syntax:

@mixin important-text {
  color: red;
  font-size: 25px;
  font-weight: bold;
  border: 1px solid blue;
}
The @include directive is used to include a mixin.
Sass @include mixin Syntax:
selector {
  @include mixin-name;
}
So, to include the important-text mixin created above:
SCSS Syntax:
.danger {
  @include important-text;
  background-color: green;
}

The Sass transpiler will convert the above to normal CSS:

CSS output:

.danger {
  color: red;
  font-size: 25px;
  font-weight: bold;
  border: 1px solid blue;
  background-color: green;
}

A mixin can also include other mixins:
SCSS Syntax:
@mixin special-text {
  @include important-text;
  @include link;
  @include special-border;
}

#Passing Variables to a Mixin
Mixins accept arguments. This way you can pass variables to a mixin.
Here is how to define a mixin with arguments:
SCSS Syntax:
/* Define mixin with two arguments */
@mixin bordered($color, $width) {
  border: $width solid $color;
}

.myArticle {
  @include bordered(blue, 1px);  // Call mixin with two values
}

.myNotes {
  @include bordered(red, 2px); // Call mixin with two values
}

After compilation, the CSS will look like this:
CSS Output:
.myArticle {
  border: 1px solid blue;
}

.myNotes {
  border: 2px solid red;
}


#Default Values for a Mixin
It is also possible to define default values for mixin variables:

SCSS Syntax:
@mixin bordered($color: blue, $width: 1px) {
  border: $width solid $color;
}
#Using a Mixin For Vendor Prefixes
Another good use of a mixin is for vendor prefixes.

Here is an example for transform:

SCSS Syntax:

@mixin transform($property) {
  -webkit-transform: $property;
  -ms-transform: $property;
  transform: $property;
}

.myBox {
  @include transform(rotate(20deg));
}

After compilation, the CSS will look like this:

CSS Output:

.myBox {
  -webkit-transform: rotate(20deg);
  -ms-transform: rotate(20deg);
  transform: rotate(20deg);
}

#Sass @extend Directive
The @extend directive lets you share a set of CSS properties from one selector to another.
The @extend directive is useful if you have almost identically styled elements that only differ in some small details.
The following Sass example first creates a basic style for buttons (this style will be used for most buttons).
 Then, we create one style for a "Report" button and one style for a "Submit" button. Both "Report" and "Submit" button inherit all 
 the CSS properties from the .button-basic class, through the @extend directive. In addition, they have their own colors defined:
 
 SCSS Syntax:
.button-basic  {
  border: none;
  padding: 15px 30px;
  text-align: center;
  font-size: 16px;
  cursor: pointer;
}

.button-report  {
  @extend .button-basic;
  background-color: red;
}

.button-submit  {
  @extend .button-basic;
  background-color: green;
  color: white;
}

After compilation, the CSS will look like this:
CSS Output:

.button-basic, .button-report, .button-submit {
  border: none;
  padding: 15px 30px;
  text-align: center;
  font-size: 16px;
  cursor: pointer;
}

.button-report  {
  background-color: red;
}

.button-submit  {
  background-color: green;
  color: white;
}